definitions:
  controllers.AddProductRequest:
    properties:
      pvzId:
        example: "1"
        type: string
      type:
        example: electronics
        type: string
    type: object
  controllers.CreatePVZRequest:
    properties:
      city:
        example: Москва
        type: string
      name:
        example: ПВЗ Центральный
        type: string
    type: object
  controllers.DummyLoginRequest:
    properties:
      role:
        example: employee
        type: string
    type: object
  controllers.ErrorResponse:
    properties:
      error:
        example: error message
        type: string
    type: object
  controllers.HealthResponse:
    properties:
      status:
        example: ok
        type: string
    type: object
  controllers.LoginRequest:
    properties:
      email:
        example: user@example.com
        type: string
      password:
        example: password123
        type: string
    type: object
  controllers.LoginResponse:
    properties:
      token:
        example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
        type: string
    type: object
  controllers.PVZListResponse:
    properties:
      page:
        example: 1
        type: integer
      pvzs:
        items:
          $ref: '#/definitions/controllers.PVZResponse'
        type: array
    type: object
  controllers.PVZResponse:
    properties:
      city:
        example: Москва
        type: string
      createdAt:
        example: "2023-10-01T12:00:00Z"
        type: string
      id:
        example: 1
        type: integer
      name:
        example: ПВЗ Центральный
        type: string
    type: object
  controllers.ProductResponse:
    properties:
      addedAt:
        example: "2023-10-01T12:00:00Z"
        type: string
      id:
        example: 550e8400-e29b-41d4-a716-446655440000
        type: string
      receptionId:
        example: 550e8400-e29b-41d4-a716-446655440001
        type: string
      type:
        example: electronics
        type: string
    type: object
  controllers.ReceptionRequest:
    properties:
      pvzId:
        example: "1"
        type: string
    type: object
  controllers.ReceptionResponse:
    properties:
      dateTime:
        example: "2023-10-01T12:00:00Z"
        type: string
      id:
        example: 550e8400-e29b-41d4-a716-446655440000
        type: string
      pvzId:
        example: 1
        type: integer
      status:
        example: active
        type: string
    type: object
  controllers.ReceptionWithProductsResponse:
    properties:
      dateTime:
        example: "2023-10-01T12:00:00Z"
        type: string
      id:
        example: 550e8400-e29b-41d4-a716-446655440000
        type: string
      productIDs:
        example:
        - '["prod1"'
        - ' "prod2"]'
        items:
          type: string
        type: array
      pvzId:
        example: 1
        type: integer
      status:
        example: active
        type: string
    type: object
  controllers.RegisterRequest:
    properties:
      email:
        example: user@example.com
        type: string
      password:
        example: password123
        type: string
      role:
        example: employee
        type: string
    type: object
  controllers.RegisterResponse:
    properties:
      email:
        example: user@example.com
        type: string
      id:
        example: 550e8400-e29b-41d4-a716-446655440000
        type: string
      role:
        example: employee
        type: string
    type: object
info:
  contact: {}
paths:
  /auth/dummy:
    post:
      consumes:
      - application/json
      description: Получение тестового токена для указанной роли (для тестирования)
      parameters:
      - description: Роль для тестового входа
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/controllers.DummyLoginRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/controllers.LoginResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/controllers.ErrorResponse'
      summary: Тестовый вход
      tags:
      - Auth
  /auth/login:
    post:
      consumes:
      - application/json
      description: Аутентификация пользователя и получение токена
      parameters:
      - description: Учетные данные
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/controllers.LoginRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/controllers.LoginResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/controllers.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/controllers.ErrorResponse'
      summary: Вход в систему
      tags:
      - Auth
  /auth/register:
    post:
      consumes:
      - application/json
      description: Создание нового пользователя в системе
      parameters:
      - description: Данные для регистрации
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/controllers.RegisterRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/controllers.RegisterResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/controllers.ErrorResponse'
      summary: Регистрация пользователя
      tags:
      - Auth
  /health:
    get:
      description: Проверка доступности сервиса
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/controllers.HealthResponse'
      summary: Проверка здоровья сервиса
      tags:
      - Health
  /metrics:
    get:
      description: Prometheus метрики приложения
      produces:
      - text/plain
      responses:
        "200":
          description: Prometheus metrics
          schema:
            type: string
      summary: Метрики приложения
      tags:
      - Metrics
  /products/:
    post:
      consumes:
      - application/json
      description: Добавление товара в активную приемку ПВЗ (только для employee и
        moderator)
      parameters:
      - description: Данные товара
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/controllers.AddProductRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/controllers.ProductResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/controllers.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Добавление товара
      tags:
      - Products
  /pvz/:
    get:
      description: Получение списка пунктов выдачи заказов с пагинацией и фильтрацией
        по городу (только для admin и moderator)
      parameters:
      - description: Номер страницы
        in: query
        name: page
        type: integer
      - description: Количество записей на странице
        in: query
        name: limit
        type: integer
      - description: Фильтр по городу
        in: query
        name: city
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/controllers.PVZListResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/controllers.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Получение списка ПВЗ
      tags:
      - PVZ
    post:
      consumes:
      - application/json
      description: Создание нового пункта выдачи заказов (только для admin и moderator)
      parameters:
      - description: Данные ПВЗ
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/controllers.CreatePVZRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/controllers.PVZResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/controllers.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/controllers.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Создание ПВЗ
      tags:
      - PVZ
  /receptions/:
    post:
      consumes:
      - application/json
      description: Создание новой приемки товаров для ПВЗ (только для employee и moderator)
      parameters:
      - description: Данные приемки
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/controllers.ReceptionRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/controllers.ReceptionResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/controllers.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Создание приемки
      tags:
      - Receptions
  /receptions/close:
    put:
      consumes:
      - application/json
      description: Закрытие активной приемки товаров (только для employee и moderator)
      parameters:
      - description: Данные для закрытия приемки
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/controllers.ReceptionRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/controllers.ReceptionResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/controllers.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Закрытие приемки
      tags:
      - Receptions
  /receptions/last-product:
    delete:
      consumes:
      - application/json
      description: Удаление последнего добавленного товара из приемки (только для
        employee и moderator)
      parameters:
      - description: Данные для удаления товара
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/controllers.ReceptionRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/controllers.ReceptionWithProductsResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/controllers.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Удаление последнего товара
      tags:
      - Receptions
swagger: "2.0"
