// Code generated by SQLBoiler 4.19.5 (https://github.com/aarondl/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/aarondl/sqlboiler/v4/boil"
	"github.com/aarondl/sqlboiler/v4/queries"
	"github.com/aarondl/sqlboiler/v4/queries/qm"
	"github.com/aarondl/sqlboiler/v4/queries/qmhelper"
	"github.com/aarondl/strmangle"
	"github.com/friendsofgo/errors"
)

const (
	CityMoscow = "Москва"
	CityKazan = "Казань"
	CitySpb = "Санкт-Петербург"
)
// PVZ is an object representing the database table.
type PVZ struct {
	ID        int64     `boil:"id" json:"id" toml:"id" yaml:"id"`
	Name      string    `boil:"name" json:"name" toml:"name" yaml:"name"`
	City      string    `boil:"city" json:"city" toml:"city" yaml:"city"`
	CreatedAt time.Time `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`

	R *pvzR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L pvzL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var PVZColumns = struct {
	ID        string
	Name      string
	City      string
	CreatedAt string
}{
	ID:        "id",
	Name:      "name",
	City:      "city",
	CreatedAt: "created_at",
}

var PVZTableColumns = struct {
	ID        string
	Name      string
	City      string
	CreatedAt string
}{
	ID:        "pvz.id",
	Name:      "pvz.name",
	City:      "pvz.city",
	CreatedAt: "pvz.created_at",
}

// Generated where

type whereHelperint64 struct{ field string }

func (w whereHelperint64) EQ(x int64) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.EQ, x) }
func (w whereHelperint64) NEQ(x int64) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.NEQ, x) }
func (w whereHelperint64) LT(x int64) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.LT, x) }
func (w whereHelperint64) LTE(x int64) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.LTE, x) }
func (w whereHelperint64) GT(x int64) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.GT, x) }
func (w whereHelperint64) GTE(x int64) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.GTE, x) }
func (w whereHelperint64) IN(slice []int64) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelperint64) NIN(slice []int64) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

var PVZWhere = struct {
	ID        whereHelperint64
	Name      whereHelperstring
	City      whereHelperstring
	CreatedAt whereHelpertime_Time
}{
	ID:        whereHelperint64{field: "\"pvz\".\"id\""},
	Name:      whereHelperstring{field: "\"pvz\".\"name\""},
	City:      whereHelperstring{field: "\"pvz\".\"city\""},
	CreatedAt: whereHelpertime_Time{field: "\"pvz\".\"created_at\""},
}

// PVZRels is where relationship names are stored.
var PVZRels = struct {
	Receptions string
}{
	Receptions: "Receptions",
}

// pvzR is where relationships are stored.
type pvzR struct {
	Receptions ReceptionSlice `boil:"Receptions" json:"Receptions" toml:"Receptions" yaml:"Receptions"`
}

// NewStruct creates a new relationship struct
func (*pvzR) NewStruct() *pvzR {
	return &pvzR{}
}

func (o *PVZ) GetReceptions() ReceptionSlice {
	if o == nil {
		return nil
	}

	return o.R.GetReceptions()
}

func (r *pvzR) GetReceptions() ReceptionSlice {
	if r == nil {
		return nil
	}

	return r.Receptions
}

// pvzL is where Load methods for each relationship are stored.
type pvzL struct{}

var (
	pvzAllColumns            = []string{"id", "name", "city", "created_at"}
	pvzColumnsWithoutDefault = []string{"name", "city"}
	pvzColumnsWithDefault    = []string{"id", "created_at"}
	pvzPrimaryKeyColumns     = []string{"id"}
	pvzGeneratedColumns      = []string{}
)

type (
	// PVZSlice is an alias for a slice of pointers to PVZ.
	// This should almost always be used instead of []PVZ.
	PVZSlice []*PVZ
	// PVZHook is the signature for custom PVZ hook methods
	PVZHook func(context.Context, boil.ContextExecutor, *PVZ) error

	pvzQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	pvzType                 = reflect.TypeOf(&PVZ{})
	pvzMapping              = queries.MakeStructMapping(pvzType)
	pvzPrimaryKeyMapping, _ = queries.BindMapping(pvzType, pvzMapping, pvzPrimaryKeyColumns)
	pvzInsertCacheMut       sync.RWMutex
	pvzInsertCache          = make(map[string]insertCache)
	pvzUpdateCacheMut       sync.RWMutex
	pvzUpdateCache          = make(map[string]updateCache)
	pvzUpsertCacheMut       sync.RWMutex
	pvzUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var pvzAfterSelectMu sync.Mutex
var pvzAfterSelectHooks []PVZHook

var pvzBeforeInsertMu sync.Mutex
var pvzBeforeInsertHooks []PVZHook
var pvzAfterInsertMu sync.Mutex
var pvzAfterInsertHooks []PVZHook

var pvzBeforeUpdateMu sync.Mutex
var pvzBeforeUpdateHooks []PVZHook
var pvzAfterUpdateMu sync.Mutex
var pvzAfterUpdateHooks []PVZHook

var pvzBeforeDeleteMu sync.Mutex
var pvzBeforeDeleteHooks []PVZHook
var pvzAfterDeleteMu sync.Mutex
var pvzAfterDeleteHooks []PVZHook

var pvzBeforeUpsertMu sync.Mutex
var pvzBeforeUpsertHooks []PVZHook
var pvzAfterUpsertMu sync.Mutex
var pvzAfterUpsertHooks []PVZHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *PVZ) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range pvzAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *PVZ) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range pvzBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *PVZ) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range pvzAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *PVZ) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range pvzBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *PVZ) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range pvzAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *PVZ) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range pvzBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *PVZ) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range pvzAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *PVZ) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range pvzBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *PVZ) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range pvzAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddPVZHook registers your hook function for all future operations.
func AddPVZHook(hookPoint boil.HookPoint, pvzHook PVZHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		pvzAfterSelectMu.Lock()
		pvzAfterSelectHooks = append(pvzAfterSelectHooks, pvzHook)
		pvzAfterSelectMu.Unlock()
	case boil.BeforeInsertHook:
		pvzBeforeInsertMu.Lock()
		pvzBeforeInsertHooks = append(pvzBeforeInsertHooks, pvzHook)
		pvzBeforeInsertMu.Unlock()
	case boil.AfterInsertHook:
		pvzAfterInsertMu.Lock()
		pvzAfterInsertHooks = append(pvzAfterInsertHooks, pvzHook)
		pvzAfterInsertMu.Unlock()
	case boil.BeforeUpdateHook:
		pvzBeforeUpdateMu.Lock()
		pvzBeforeUpdateHooks = append(pvzBeforeUpdateHooks, pvzHook)
		pvzBeforeUpdateMu.Unlock()
	case boil.AfterUpdateHook:
		pvzAfterUpdateMu.Lock()
		pvzAfterUpdateHooks = append(pvzAfterUpdateHooks, pvzHook)
		pvzAfterUpdateMu.Unlock()
	case boil.BeforeDeleteHook:
		pvzBeforeDeleteMu.Lock()
		pvzBeforeDeleteHooks = append(pvzBeforeDeleteHooks, pvzHook)
		pvzBeforeDeleteMu.Unlock()
	case boil.AfterDeleteHook:
		pvzAfterDeleteMu.Lock()
		pvzAfterDeleteHooks = append(pvzAfterDeleteHooks, pvzHook)
		pvzAfterDeleteMu.Unlock()
	case boil.BeforeUpsertHook:
		pvzBeforeUpsertMu.Lock()
		pvzBeforeUpsertHooks = append(pvzBeforeUpsertHooks, pvzHook)
		pvzBeforeUpsertMu.Unlock()
	case boil.AfterUpsertHook:
		pvzAfterUpsertMu.Lock()
		pvzAfterUpsertHooks = append(pvzAfterUpsertHooks, pvzHook)
		pvzAfterUpsertMu.Unlock()
	}
}

// One returns a single pvz record from the query.
func (q pvzQuery) One(ctx context.Context, exec boil.ContextExecutor) (*PVZ, error) {
	o := &PVZ{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for pvz")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all PVZ records from the query.
func (q pvzQuery) All(ctx context.Context, exec boil.ContextExecutor) (PVZSlice, error) {
	var o []*PVZ

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to PVZ slice")
	}

	if len(pvzAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all PVZ records in the query.
func (q pvzQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count pvz rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q pvzQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if pvz exists")
	}

	return count > 0, nil
}

// Receptions retrieves all the reception's Receptions with an executor.
func (o *PVZ) Receptions(mods ...qm.QueryMod) receptionQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"receptions\".\"pvz_id\"=?", o.ID),
	)

	return Receptions(queryMods...)
}

// LoadReceptions allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (pvzL) LoadReceptions(ctx context.Context, e boil.ContextExecutor, singular bool, maybePVZ interface{}, mods queries.Applicator) error {
	var slice []*PVZ
	var object *PVZ

	if singular {
		var ok bool
		object, ok = maybePVZ.(*PVZ)
		if !ok {
			object = new(PVZ)
			ok = queries.SetFromEmbeddedStruct(&object, &maybePVZ)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybePVZ))
			}
		}
	} else {
		s, ok := maybePVZ.(*[]*PVZ)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybePVZ)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybePVZ))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &pvzR{}
		}
		args[object.ID] = struct{}{}
	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &pvzR{}
			}
			args[obj.ID] = struct{}{}
		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`receptions`),
		qm.WhereIn(`receptions.pvz_id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load receptions")
	}

	var resultSlice []*Reception
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice receptions")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on receptions")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for receptions")
	}

	if len(receptionAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.Receptions = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &receptionR{}
			}
			foreign.R.PVZ = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.PVZID {
				local.R.Receptions = append(local.R.Receptions, foreign)
				if foreign.R == nil {
					foreign.R = &receptionR{}
				}
				foreign.R.PVZ = local
				break
			}
		}
	}

	return nil
}

// AddReceptions adds the given related objects to the existing relationships
// of the pvz, optionally inserting them as new records.
// Appends related to o.R.Receptions.
// Sets related.R.PVZ appropriately.
func (o *PVZ) AddReceptions(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Reception) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.PVZID = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"receptions\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"pvz_id"}),
				strmangle.WhereClause("\"", "\"", 2, receptionPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.PVZID = o.ID
		}
	}

	if o.R == nil {
		o.R = &pvzR{
			Receptions: related,
		}
	} else {
		o.R.Receptions = append(o.R.Receptions, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &receptionR{
				PVZ: o,
			}
		} else {
			rel.R.PVZ = o
		}
	}
	return nil
}

// PVZS retrieves all the records using an executor.
func PVZS(mods ...qm.QueryMod) pvzQuery {
	mods = append(mods, qm.From("\"pvz\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"pvz\".*"})
	}

	return pvzQuery{q}
}

// FindPVZ retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindPVZ(ctx context.Context, exec boil.ContextExecutor, iD int64, selectCols ...string) (*PVZ, error) {
	pvzObj := &PVZ{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"pvz\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, pvzObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from pvz")
	}

	if err = pvzObj.doAfterSelectHooks(ctx, exec); err != nil {
		return pvzObj, err
	}

	return pvzObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *PVZ) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no pvz provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(pvzColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	pvzInsertCacheMut.RLock()
	cache, cached := pvzInsertCache[key]
	pvzInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			pvzAllColumns,
			pvzColumnsWithDefault,
			pvzColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(pvzType, pvzMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(pvzType, pvzMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"pvz\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"pvz\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into pvz")
	}

	if !cached {
		pvzInsertCacheMut.Lock()
		pvzInsertCache[key] = cache
		pvzInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the PVZ.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *PVZ) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	pvzUpdateCacheMut.RLock()
	cache, cached := pvzUpdateCache[key]
	pvzUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			pvzAllColumns,
			pvzPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update pvz, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"pvz\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, pvzPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(pvzType, pvzMapping, append(wl, pvzPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update pvz row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for pvz")
	}

	if !cached {
		pvzUpdateCacheMut.Lock()
		pvzUpdateCache[key] = cache
		pvzUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q pvzQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for pvz")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for pvz")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o PVZSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), pvzPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"pvz\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, pvzPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in pvz slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all pvz")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *PVZ) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns, opts ...UpsertOptionFunc) error {
	if o == nil {
		return errors.New("models: no pvz provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(pvzColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	pvzUpsertCacheMut.RLock()
	cache, cached := pvzUpsertCache[key]
	pvzUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			pvzAllColumns,
			pvzColumnsWithDefault,
			pvzColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			pvzAllColumns,
			pvzPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert pvz, could not build update column list")
		}

		ret := strmangle.SetComplement(pvzAllColumns, strmangle.SetIntersect(insert, update))

		conflict := conflictColumns
		if len(conflict) == 0 && updateOnConflict && len(update) != 0 {
			if len(pvzPrimaryKeyColumns) == 0 {
				return errors.New("models: unable to upsert pvz, could not build conflict column list")
			}

			conflict = make([]string, len(pvzPrimaryKeyColumns))
			copy(conflict, pvzPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"pvz\"", updateOnConflict, ret, update, conflict, insert, opts...)

		cache.valueMapping, err = queries.BindMapping(pvzType, pvzMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(pvzType, pvzMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert pvz")
	}

	if !cached {
		pvzUpsertCacheMut.Lock()
		pvzUpsertCache[key] = cache
		pvzUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single PVZ record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *PVZ) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no PVZ provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), pvzPrimaryKeyMapping)
	sql := "DELETE FROM \"pvz\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from pvz")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for pvz")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q pvzQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no pvzQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from pvz")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for pvz")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o PVZSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(pvzBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), pvzPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"pvz\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, pvzPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from pvz slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for pvz")
	}

	if len(pvzAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *PVZ) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindPVZ(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *PVZSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := PVZSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), pvzPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"pvz\".* FROM \"pvz\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, pvzPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in PVZSlice")
	}

	*o = slice

	return nil
}

// PVZExists checks if the PVZ row exists.
func PVZExists(ctx context.Context, exec boil.ContextExecutor, iD int64) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"pvz\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if pvz exists")
	}

	return exists, nil
}

// Exists checks if the PVZ row exists.
func (o *PVZ) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return PVZExists(ctx, exec, o.ID)
}
