// Code generated by SQLBoiler 4.19.5 (https://github.com/aarondl/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/aarondl/sqlboiler/v4/boil"
	"github.com/aarondl/sqlboiler/v4/queries"
	"github.com/aarondl/sqlboiler/v4/queries/qm"
	"github.com/aarondl/sqlboiler/v4/queries/qmhelper"
	"github.com/aarondl/sqlboiler/v4/types"
	"github.com/aarondl/strmangle"
	"github.com/friendsofgo/errors"
)


const (
	ReceptionInProgress = "in_progress"
	ReceptionClosed    = "closed"
)

// Reception is an object representing the database table.
type Reception struct {
	ID         string     `boil:"id" json:"id" toml:"id" yaml:"id"`
	PVZID      int64      `boil:"pvz_id" json:"pvz_id" toml:"pvz_id" yaml:"pvz_id"`
	Status     string     `boil:"status" json:"status" toml:"status" yaml:"status"`
	ProductIds types.JSON `boil:"product_ids" json:"product_ids" toml:"product_ids" yaml:"product_ids"`
	DateTime   time.Time  `boil:"date_time" json:"date_time" toml:"date_time" yaml:"date_time"`

	R          *receptionR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L          receptionL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var ReceptionColumns = struct {
	ID         string
	PVZID      string
	Status     string
	ProductIds string
	DateTime   string
}{
	ID:         "id",
	PVZID:      "pvz_id",
	Status:     "status",
	ProductIds: "product_ids",
	DateTime:   "date_time",
}

var ReceptionTableColumns = struct {
	ID         string
	PVZID      string
	Status     string
	ProductIds string
	DateTime   string
}{
	ID:         "receptions.id",
	PVZID:      "receptions.pvz_id",
	Status:     "receptions.status",
	ProductIds: "receptions.product_ids",
	DateTime:   "receptions.date_time",
}

// Generated where

type whereHelpertypes_JSON struct{ field string }

func (w whereHelpertypes_JSON) EQ(x types.JSON) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.EQ, x)
}
func (w whereHelpertypes_JSON) NEQ(x types.JSON) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.NEQ, x)
}
func (w whereHelpertypes_JSON) LT(x types.JSON) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpertypes_JSON) LTE(x types.JSON) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpertypes_JSON) GT(x types.JSON) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpertypes_JSON) GTE(x types.JSON) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

var ReceptionWhere = struct {
	ID         whereHelperstring
	PVZID      whereHelperint64
	Status     whereHelperstring
	ProductIds whereHelpertypes_JSON
	DateTime   whereHelpertime_Time
}{
	ID:         whereHelperstring{field: "\"receptions\".\"id\""},
	PVZID:      whereHelperint64{field: "\"receptions\".\"pvz_id\""},
	Status:     whereHelperstring{field: "\"receptions\".\"status\""},
	ProductIds: whereHelpertypes_JSON{field: "\"receptions\".\"product_ids\""},
	DateTime:   whereHelpertime_Time{field: "\"receptions\".\"date_time\""},
}

// ReceptionRels is where relationship names are stored.
var ReceptionRels = struct {
	PVZ      string
	Products string
}{
	PVZ:      "PVZ",
	Products: "Products",
}

// receptionR is where relationships are stored.
type receptionR struct {
	PVZ      *PVZ         `boil:"PVZ" json:"PVZ" toml:"PVZ" yaml:"PVZ"`
	Products ProductSlice `boil:"Products" json:"Products" toml:"Products" yaml:"Products"`
}

// NewStruct creates a new relationship struct
func (*receptionR) NewStruct() *receptionR {
	return &receptionR{}
}

func (o *Reception) GetPVZ() *PVZ {
	if o == nil {
		return nil
	}

	return o.R.GetPVZ()
}

func (r *receptionR) GetPVZ() *PVZ {
	if r == nil {
		return nil
	}

	return r.PVZ
}

func (o *Reception) GetProducts() ProductSlice {
	if o == nil {
		return nil
	}

	return o.R.GetProducts()
}

func (r *receptionR) GetProducts() ProductSlice {
	if r == nil {
		return nil
	}

	return r.Products
}

// receptionL is where Load methods for each relationship are stored.
type receptionL struct{}

var (
	receptionAllColumns            = []string{"id", "pvz_id", "status", "product_ids", "date_time"}
	receptionColumnsWithoutDefault = []string{"id", "pvz_id", "status"}
	receptionColumnsWithDefault    = []string{"product_ids", "date_time"}
	receptionPrimaryKeyColumns     = []string{"id"}
	receptionGeneratedColumns      = []string{}
)

type (
	// ReceptionSlice is an alias for a slice of pointers to Reception.
	// This should almost always be used instead of []Reception.
	ReceptionSlice []*Reception
	// ReceptionHook is the signature for custom Reception hook methods
	ReceptionHook func(context.Context, boil.ContextExecutor, *Reception) error

	receptionQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	receptionType                 = reflect.TypeOf(&Reception{})
	receptionMapping              = queries.MakeStructMapping(receptionType)
	receptionPrimaryKeyMapping, _ = queries.BindMapping(receptionType, receptionMapping, receptionPrimaryKeyColumns)
	receptionInsertCacheMut       sync.RWMutex
	receptionInsertCache          = make(map[string]insertCache)
	receptionUpdateCacheMut       sync.RWMutex
	receptionUpdateCache          = make(map[string]updateCache)
	receptionUpsertCacheMut       sync.RWMutex
	receptionUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var receptionAfterSelectMu sync.Mutex
var receptionAfterSelectHooks []ReceptionHook

var receptionBeforeInsertMu sync.Mutex
var receptionBeforeInsertHooks []ReceptionHook
var receptionAfterInsertMu sync.Mutex
var receptionAfterInsertHooks []ReceptionHook

var receptionBeforeUpdateMu sync.Mutex
var receptionBeforeUpdateHooks []ReceptionHook
var receptionAfterUpdateMu sync.Mutex
var receptionAfterUpdateHooks []ReceptionHook

var receptionBeforeDeleteMu sync.Mutex
var receptionBeforeDeleteHooks []ReceptionHook
var receptionAfterDeleteMu sync.Mutex
var receptionAfterDeleteHooks []ReceptionHook

var receptionBeforeUpsertMu sync.Mutex
var receptionBeforeUpsertHooks []ReceptionHook
var receptionAfterUpsertMu sync.Mutex
var receptionAfterUpsertHooks []ReceptionHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *Reception) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range receptionAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *Reception) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range receptionBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *Reception) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range receptionAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *Reception) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range receptionBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *Reception) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range receptionAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *Reception) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range receptionBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *Reception) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range receptionAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *Reception) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range receptionBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *Reception) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range receptionAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddReceptionHook registers your hook function for all future operations.
func AddReceptionHook(hookPoint boil.HookPoint, receptionHook ReceptionHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		receptionAfterSelectMu.Lock()
		receptionAfterSelectHooks = append(receptionAfterSelectHooks, receptionHook)
		receptionAfterSelectMu.Unlock()
	case boil.BeforeInsertHook:
		receptionBeforeInsertMu.Lock()
		receptionBeforeInsertHooks = append(receptionBeforeInsertHooks, receptionHook)
		receptionBeforeInsertMu.Unlock()
	case boil.AfterInsertHook:
		receptionAfterInsertMu.Lock()
		receptionAfterInsertHooks = append(receptionAfterInsertHooks, receptionHook)
		receptionAfterInsertMu.Unlock()
	case boil.BeforeUpdateHook:
		receptionBeforeUpdateMu.Lock()
		receptionBeforeUpdateHooks = append(receptionBeforeUpdateHooks, receptionHook)
		receptionBeforeUpdateMu.Unlock()
	case boil.AfterUpdateHook:
		receptionAfterUpdateMu.Lock()
		receptionAfterUpdateHooks = append(receptionAfterUpdateHooks, receptionHook)
		receptionAfterUpdateMu.Unlock()
	case boil.BeforeDeleteHook:
		receptionBeforeDeleteMu.Lock()
		receptionBeforeDeleteHooks = append(receptionBeforeDeleteHooks, receptionHook)
		receptionBeforeDeleteMu.Unlock()
	case boil.AfterDeleteHook:
		receptionAfterDeleteMu.Lock()
		receptionAfterDeleteHooks = append(receptionAfterDeleteHooks, receptionHook)
		receptionAfterDeleteMu.Unlock()
	case boil.BeforeUpsertHook:
		receptionBeforeUpsertMu.Lock()
		receptionBeforeUpsertHooks = append(receptionBeforeUpsertHooks, receptionHook)
		receptionBeforeUpsertMu.Unlock()
	case boil.AfterUpsertHook:
		receptionAfterUpsertMu.Lock()
		receptionAfterUpsertHooks = append(receptionAfterUpsertHooks, receptionHook)
		receptionAfterUpsertMu.Unlock()
	}
}

// One returns a single reception record from the query.
func (q receptionQuery) One(ctx context.Context, exec boil.ContextExecutor) (*Reception, error) {
	o := &Reception{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for receptions")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all Reception records from the query.
func (q receptionQuery) All(ctx context.Context, exec boil.ContextExecutor) (ReceptionSlice, error) {
	var o []*Reception

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to Reception slice")
	}

	if len(receptionAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all Reception records in the query.
func (q receptionQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count receptions rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q receptionQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if receptions exists")
	}

	return count > 0, nil
}

// PVZ pointed to by the foreign key.
func (o *Reception) PVZ(mods ...qm.QueryMod) pvzQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.PVZID),
	}

	queryMods = append(queryMods, mods...)

	return PVZS(queryMods...)
}

// Products retrieves all the product's Products with an executor.
func (o *Reception) Products(mods ...qm.QueryMod) productQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"products\".\"reception_id\"=?", o.ID),
	)

	return Products(queryMods...)
}

// LoadPVZ allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (receptionL) LoadPVZ(ctx context.Context, e boil.ContextExecutor, singular bool, maybeReception interface{}, mods queries.Applicator) error {
	var slice []*Reception
	var object *Reception

	if singular {
		var ok bool
		object, ok = maybeReception.(*Reception)
		if !ok {
			object = new(Reception)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeReception)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeReception))
			}
		}
	} else {
		s, ok := maybeReception.(*[]*Reception)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeReception)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeReception))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &receptionR{}
		}
		args[object.PVZID] = struct{}{}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &receptionR{}
			}

			args[obj.PVZID] = struct{}{}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`pvz`),
		qm.WhereIn(`pvz.id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load PVZ")
	}

	var resultSlice []*PVZ
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice PVZ")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for pvz")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for pvz")
	}

	if len(pvzAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.PVZ = foreign
		if foreign.R == nil {
			foreign.R = &pvzR{}
		}
		foreign.R.Receptions = append(foreign.R.Receptions, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.PVZID == foreign.ID {
				local.R.PVZ = foreign
				if foreign.R == nil {
					foreign.R = &pvzR{}
				}
				foreign.R.Receptions = append(foreign.R.Receptions, local)
				break
			}
		}
	}

	return nil
}

// LoadProducts allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (receptionL) LoadProducts(ctx context.Context, e boil.ContextExecutor, singular bool, maybeReception interface{}, mods queries.Applicator) error {
	var slice []*Reception
	var object *Reception

	if singular {
		var ok bool
		object, ok = maybeReception.(*Reception)
		if !ok {
			object = new(Reception)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeReception)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeReception))
			}
		}
	} else {
		s, ok := maybeReception.(*[]*Reception)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeReception)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeReception))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &receptionR{}
		}
		args[object.ID] = struct{}{}
	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &receptionR{}
			}
			args[obj.ID] = struct{}{}
		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`products`),
		qm.WhereIn(`products.reception_id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load products")
	}

	var resultSlice []*Product
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice products")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on products")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for products")
	}

	if len(productAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.Products = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &productR{}
			}
			foreign.R.Reception = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.ReceptionID {
				local.R.Products = append(local.R.Products, foreign)
				if foreign.R == nil {
					foreign.R = &productR{}
				}
				foreign.R.Reception = local
				break
			}
		}
	}

	return nil
}

// SetPVZ of the reception to the related item.
// Sets o.R.PVZ to related.
// Adds o to related.R.Receptions.
func (o *Reception) SetPVZ(ctx context.Context, exec boil.ContextExecutor, insert bool, related *PVZ) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"receptions\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"pvz_id"}),
		strmangle.WhereClause("\"", "\"", 2, receptionPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.PVZID = related.ID
	if o.R == nil {
		o.R = &receptionR{
			PVZ: related,
		}
	} else {
		o.R.PVZ = related
	}

	if related.R == nil {
		related.R = &pvzR{
			Receptions: ReceptionSlice{o},
		}
	} else {
		related.R.Receptions = append(related.R.Receptions, o)
	}

	return nil
}

// AddProducts adds the given related objects to the existing relationships
// of the reception, optionally inserting them as new records.
// Appends related to o.R.Products.
// Sets related.R.Reception appropriately.
func (o *Reception) AddProducts(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Product) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.ReceptionID = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"products\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"reception_id"}),
				strmangle.WhereClause("\"", "\"", 2, productPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.ReceptionID = o.ID
		}
	}

	if o.R == nil {
		o.R = &receptionR{
			Products: related,
		}
	} else {
		o.R.Products = append(o.R.Products, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &productR{
				Reception: o,
			}
		} else {
			rel.R.Reception = o
		}
	}
	return nil
}

// Receptions retrieves all the records using an executor.
func Receptions(mods ...qm.QueryMod) receptionQuery {
	mods = append(mods, qm.From("\"receptions\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"receptions\".*"})
	}

	return receptionQuery{q}
}

// FindReception retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindReception(ctx context.Context, exec boil.ContextExecutor, iD string, selectCols ...string) (*Reception, error) {
	receptionObj := &Reception{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"receptions\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, receptionObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from receptions")
	}

	if err = receptionObj.doAfterSelectHooks(ctx, exec); err != nil {
		return receptionObj, err
	}

	return receptionObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Reception) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no receptions provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(receptionColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	receptionInsertCacheMut.RLock()
	cache, cached := receptionInsertCache[key]
	receptionInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			receptionAllColumns,
			receptionColumnsWithDefault,
			receptionColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(receptionType, receptionMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(receptionType, receptionMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"receptions\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"receptions\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into receptions")
	}

	if !cached {
		receptionInsertCacheMut.Lock()
		receptionInsertCache[key] = cache
		receptionInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the Reception.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Reception) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	receptionUpdateCacheMut.RLock()
	cache, cached := receptionUpdateCache[key]
	receptionUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			receptionAllColumns,
			receptionPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update receptions, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"receptions\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, receptionPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(receptionType, receptionMapping, append(wl, receptionPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update receptions row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for receptions")
	}

	if !cached {
		receptionUpdateCacheMut.Lock()
		receptionUpdateCache[key] = cache
		receptionUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q receptionQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for receptions")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for receptions")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o ReceptionSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), receptionPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"receptions\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, receptionPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in reception slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all reception")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *Reception) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns, opts ...UpsertOptionFunc) error {
	if o == nil {
		return errors.New("models: no receptions provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(receptionColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	receptionUpsertCacheMut.RLock()
	cache, cached := receptionUpsertCache[key]
	receptionUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			receptionAllColumns,
			receptionColumnsWithDefault,
			receptionColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			receptionAllColumns,
			receptionPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert receptions, could not build update column list")
		}

		ret := strmangle.SetComplement(receptionAllColumns, strmangle.SetIntersect(insert, update))

		conflict := conflictColumns
		if len(conflict) == 0 && updateOnConflict && len(update) != 0 {
			if len(receptionPrimaryKeyColumns) == 0 {
				return errors.New("models: unable to upsert receptions, could not build conflict column list")
			}

			conflict = make([]string, len(receptionPrimaryKeyColumns))
			copy(conflict, receptionPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"receptions\"", updateOnConflict, ret, update, conflict, insert, opts...)

		cache.valueMapping, err = queries.BindMapping(receptionType, receptionMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(receptionType, receptionMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert receptions")
	}

	if !cached {
		receptionUpsertCacheMut.Lock()
		receptionUpsertCache[key] = cache
		receptionUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single Reception record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Reception) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no Reception provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), receptionPrimaryKeyMapping)
	sql := "DELETE FROM \"receptions\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from receptions")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for receptions")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q receptionQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no receptionQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from receptions")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for receptions")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o ReceptionSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(receptionBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), receptionPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"receptions\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, receptionPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from reception slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for receptions")
	}

	if len(receptionAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Reception) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindReception(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *ReceptionSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := ReceptionSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), receptionPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"receptions\".* FROM \"receptions\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, receptionPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in ReceptionSlice")
	}

	*o = slice

	return nil
}

// ReceptionExists checks if the Reception row exists.
func ReceptionExists(ctx context.Context, exec boil.ContextExecutor, iD string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"receptions\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if receptions exists")
	}

	return exists, nil
}

// Exists checks if the Reception row exists.
func (o *Reception) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return ReceptionExists(ctx, exec, o.ID)
}
