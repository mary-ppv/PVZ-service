// Code generated by SQLBoiler 4.19.5 (https://github.com/aarondl/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import "testing"

// This test suite runs each operation test in parallel.
// Example, if your database has 3 tables, the suite will run:
// table1, table2 and table3 Delete in parallel
// table1, table2 and table3 Insert in parallel, and so forth.
// It does NOT run each operation group in parallel.
// Separating the tests thusly grants avoidance of Postgres deadlocks.
func TestParent(t *testing.T) {
	t.Run("Products", testProducts)
	t.Run("PVZS", testPVZS)
	t.Run("Receptions", testReceptions)
	t.Run("SchemaMigrations", testSchemaMigrations)
	t.Run("Users", testUsers)
}

func TestDelete(t *testing.T) {
	t.Run("Products", testProductsDelete)
	t.Run("PVZS", testPVZSDelete)
	t.Run("Receptions", testReceptionsDelete)
	t.Run("SchemaMigrations", testSchemaMigrationsDelete)
	t.Run("Users", testUsersDelete)
}

func TestQueryDeleteAll(t *testing.T) {
	t.Run("Products", testProductsQueryDeleteAll)
	t.Run("PVZS", testPVZSQueryDeleteAll)
	t.Run("Receptions", testReceptionsQueryDeleteAll)
	t.Run("SchemaMigrations", testSchemaMigrationsQueryDeleteAll)
	t.Run("Users", testUsersQueryDeleteAll)
}

func TestSliceDeleteAll(t *testing.T) {
	t.Run("Products", testProductsSliceDeleteAll)
	t.Run("PVZS", testPVZSSliceDeleteAll)
	t.Run("Receptions", testReceptionsSliceDeleteAll)
	t.Run("SchemaMigrations", testSchemaMigrationsSliceDeleteAll)
	t.Run("Users", testUsersSliceDeleteAll)
}

func TestExists(t *testing.T) {
	t.Run("Products", testProductsExists)
	t.Run("PVZS", testPVZSExists)
	t.Run("Receptions", testReceptionsExists)
	t.Run("SchemaMigrations", testSchemaMigrationsExists)
	t.Run("Users", testUsersExists)
}

func TestFind(t *testing.T) {
	t.Run("Products", testProductsFind)
	t.Run("PVZS", testPVZSFind)
	t.Run("Receptions", testReceptionsFind)
	t.Run("SchemaMigrations", testSchemaMigrationsFind)
	t.Run("Users", testUsersFind)
}

func TestBind(t *testing.T) {
	t.Run("Products", testProductsBind)
	t.Run("PVZS", testPVZSBind)
	t.Run("Receptions", testReceptionsBind)
	t.Run("SchemaMigrations", testSchemaMigrationsBind)
	t.Run("Users", testUsersBind)
}

func TestOne(t *testing.T) {
	t.Run("Products", testProductsOne)
	t.Run("PVZS", testPVZSOne)
	t.Run("Receptions", testReceptionsOne)
	t.Run("SchemaMigrations", testSchemaMigrationsOne)
	t.Run("Users", testUsersOne)
}

func TestAll(t *testing.T) {
	t.Run("Products", testProductsAll)
	t.Run("PVZS", testPVZSAll)
	t.Run("Receptions", testReceptionsAll)
	t.Run("SchemaMigrations", testSchemaMigrationsAll)
	t.Run("Users", testUsersAll)
}

func TestCount(t *testing.T) {
	t.Run("Products", testProductsCount)
	t.Run("PVZS", testPVZSCount)
	t.Run("Receptions", testReceptionsCount)
	t.Run("SchemaMigrations", testSchemaMigrationsCount)
	t.Run("Users", testUsersCount)
}

func TestHooks(t *testing.T) {
	t.Run("Products", testProductsHooks)
	t.Run("PVZS", testPVZSHooks)
	t.Run("Receptions", testReceptionsHooks)
	t.Run("SchemaMigrations", testSchemaMigrationsHooks)
	t.Run("Users", testUsersHooks)
}

func TestInsert(t *testing.T) {
	t.Run("Products", testProductsInsert)
	t.Run("Products", testProductsInsertWhitelist)
	t.Run("PVZS", testPVZSInsert)
	t.Run("PVZS", testPVZSInsertWhitelist)
	t.Run("Receptions", testReceptionsInsert)
	t.Run("Receptions", testReceptionsInsertWhitelist)
	t.Run("SchemaMigrations", testSchemaMigrationsInsert)
	t.Run("SchemaMigrations", testSchemaMigrationsInsertWhitelist)
	t.Run("Users", testUsersInsert)
	t.Run("Users", testUsersInsertWhitelist)
}

func TestReload(t *testing.T) {
	t.Run("Products", testProductsReload)
	t.Run("PVZS", testPVZSReload)
	t.Run("Receptions", testReceptionsReload)
	t.Run("SchemaMigrations", testSchemaMigrationsReload)
	t.Run("Users", testUsersReload)
}

func TestReloadAll(t *testing.T) {
	t.Run("Products", testProductsReloadAll)
	t.Run("PVZS", testPVZSReloadAll)
	t.Run("Receptions", testReceptionsReloadAll)
	t.Run("SchemaMigrations", testSchemaMigrationsReloadAll)
	t.Run("Users", testUsersReloadAll)
}

func TestSelect(t *testing.T) {
	t.Run("Products", testProductsSelect)
	t.Run("PVZS", testPVZSSelect)
	t.Run("Receptions", testReceptionsSelect)
	t.Run("SchemaMigrations", testSchemaMigrationsSelect)
	t.Run("Users", testUsersSelect)
}

func TestUpdate(t *testing.T) {
	t.Run("Products", testProductsUpdate)
	t.Run("PVZS", testPVZSUpdate)
	t.Run("Receptions", testReceptionsUpdate)
	t.Run("SchemaMigrations", testSchemaMigrationsUpdate)
	t.Run("Users", testUsersUpdate)
}

func TestSliceUpdateAll(t *testing.T) {
	t.Run("Products", testProductsSliceUpdateAll)
	t.Run("PVZS", testPVZSSliceUpdateAll)
	t.Run("Receptions", testReceptionsSliceUpdateAll)
	t.Run("SchemaMigrations", testSchemaMigrationsSliceUpdateAll)
	t.Run("Users", testUsersSliceUpdateAll)
}
